package pl.pszczepanski.techut.zad03.service;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import pl.pszczepanski.techut.zad03.domain.Shoe;
import pl.pszczepanski.techut.zad03.service.ShoeManager;

public class ShoeManagerJDBC implements ShoeManager {

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	private Connection connection;
	private final Statement statement;
	//private String createTablePerson = "CREATE TABLE Person(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20) UNIQUE, yob integer)";
	private boolean tableExists = false;

	private PreparedStatement createShoesTableStmt;
	private PreparedStatement insertShoesStmt;
	private PreparedStatement updateShoesStmt;
	private PreparedStatement readAllShoesPStmt;
	private PreparedStatement deleteAllShoesPStmt;
	private PreparedStatement searchShoebyProducerPStmt;
	private PreparedStatement deleteShoePStmt;

	public ShoeManagerJDBC() throws SQLException {

		connection = DriverManager.getConnection(url);
		statement = connection.createStatement();

		createShoesTableStmt = connection.prepareStatement("CREATE TABLE Shoe (id bigint GENERATED BY DEFAULT AS IDENTITY, producer VARCHAR(30), type VARCHAR(30), size INT,  productionDate DATE, price DOUBLE)");

		ResultSet rs = connection.getMetaData().getTables(null, null, null, null);

		while (rs.next()) {
			if ("Shoe".equalsIgnoreCase(rs.getString("table_name"))) {
				tableExists = true;

				break;
			}
		}

		if (!tableExists){
			createShoesTableStmt.executeUpdate();
		}

		insertShoesStmt = connection.prepareStatement("INSERT INTO Shoe(producer, type, size, productionDate, price) VALUES(?,?,?,?,?)");
		deleteAllShoesPStmt = connection.prepareStatement("DELETE FROM Shoe");
		searchShoebyProducerPStmt = connection.prepareStatement("SELECT * FROM Shoe WHERE producer=?");
		readAllShoesPStmt = connection.prepareStatement("SELECT * FROM Shoe");
		deleteShoePStmt = connection.prepareStatement("DELETE FROM Shoe WHERE producer = ?");
	}

	@Override
	public void addShoe(Shoe shoe) throws SQLException {
		insertShoesStmt.setString(1,shoe.getProducer());
		insertShoesStmt.setString(2,shoe.getType());
		insertShoesStmt.setInt(3,shoe.getSize());
		insertShoesStmt.setDate(4,shoe.getProductionDate());
		insertShoesStmt.setDouble(5,shoe.getPrice());
		insertShoesStmt.executeUpdate();

	}

	@Override
	public void showAllShoes() throws SQLException {
		ResultSet rs = readAllShoesPStmt.executeQuery();

		while (rs.next()){
			System.out.println("Producer: " + rs.getString("producer") + "\nType: " + rs.getString("type") + "\nSize: " + rs.getInt("size") +"\nProduction date: " + rs.getDate("productionDate") + "\nPrice: " + rs.getDouble("price")  + "\n");
		}

	}

	@Override
	public void searchShoesbyProducer(String producer) throws SQLException {

		searchShoebyProducerPStmt.setString(1,producer);

		ResultSet rs = searchShoebyProducerPStmt.executeQuery();

		while (rs.next()){
			System.out.println("Producer: " + rs.getString("producer") + "\nType: " + rs.getString("type") + "\nSize: " + rs.getInt("size") +"\nProduction date: " + rs.getDate("productionDate") + "\nPrice: " + rs.getDouble("price")  + "\n");
		}

	}

	@Override
	public void updateShoes(String producer, String type, int size, Date productionDate, double price) throws SQLException {
		searchShoebyProducerPStmt.setString(1, producer);

		updateShoesStmt = connection.prepareStatement("UPDATE Shoe SET producer=?, type=?, size=?, productionDate=?, price=? WHERE producer=?");

		ResultSet rs = searchShoebyProducerPStmt.executeQuery();

		if(rs.next() == false){
			System.out.println("There's no shoe from that producer");
		}
		else {
			updateShoesStmt.setString(1,producer);
			updateShoesStmt.setString(2,type);
			updateShoesStmt.setInt(3, size);
			updateShoesStmt.setDate(4,(java.sql.Date) productionDate);
			updateShoesStmt.setDouble(5, price);

			updateShoesStmt.executeUpdate();
		}
	}

	@Override
	public void removeShoes() throws SQLException {

		deleteAllShoesPStmt.executeUpdate();

	}

	@Override
	public void removeShoe(String producer) throws SQLException {

		deleteShoePStmt.setString(1,producer);
		deleteShoePStmt.executeUpdate();

	}

	@Override
	public boolean addShoes(List<Shoe> shoes) {

		try {
			connection.setAutoCommit(false);

			for (Shoe shoe : shoes) {

				insertShoesStmt.setString(1, shoe.getProducer());
				insertShoesStmt.setString(2, shoe.getType());
				insertShoesStmt.setInt(3, shoe.getSize());
				insertShoesStmt.setDate(4, shoe.getProductionDate());
				insertShoesStmt.setDouble(5, shoe.getPrice());

				insertShoesStmt.executeUpdate();
			}
			connection.commit();
			return true;

		} catch (SQLException e) {
			System.out.println("Rollback");
			try {
				connection.rollback();

			} catch (SQLException e1){
			e1.printStackTrace();
		}
	}



		return false;
	}
}
